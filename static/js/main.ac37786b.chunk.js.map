{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","code","setCode","error","evalResult","undefined","timeInSeconds","timeInMilliseconds","executionStatus","setExecutionStatus","runTest","length","snippets","split","execStatus","map","snippet","result","t0","performance","now","eval","err","t1","durationMs","consolify","value","util","inspect","showHidden","className","style","display","flexDirection","width","height","language","theme","onChange","event","padding","color","fontFamily","borderRadius","backgroundColor","onClick","index","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"00BAIA,SAASA,MAAO,IAAD,UACaC,oDACpB,yPAFO,mKACJC,KADI,cACEC,QADF,yBAImCF,oDAAS,CAAC,CAAEG,MAAO,KAAMC,gBAAYC,EAAWC,cAAe,EAAGC,mBAAoB,KAJzH,oKAIJC,gBAJI,cAIaC,mBAJb,cAMX,SAASC,UACL,GAAKT,MAAwB,IAAhBA,KAAKU,OAAlB,CAEA,IAAMC,SAAWX,KAAKY,MAAM,WAEtBC,WAAaF,SAASG,KAAI,SAACC,SAC7B,IAAIb,MAAQ,KACRc,OAAS,KACPC,GAAKC,YAAYC,MAEvB,IACIH,OAASI,KAAKL,SAChB,MAAOM,KACLnB,MAAQmB,IAGZ,IAAMC,GAAKJ,YAAYC,MAEjBI,WAAaD,GAAKL,GAExB,MAAO,CAAEf,YAAOC,WAAYa,OAAQX,cAAekB,WAAa,IAAMjB,mBAAoBiB,eAG9Ff,mBAAmBK,aAGvB,SAASW,UAAUC,GACf,OAAOC,4CAAKC,QAAQF,EAAO,CAAEG,YAAY,IAG7C,OACI,kEAAKC,UAAU,OACX,kEAAKA,UAAU,iBAAiBC,MAAO,CAAEC,QAAS,OAAQC,cAAe,QACrE,kEAAKH,UAAU,kBACX,2DAAC,mEAAD,CACII,MAAM,OACNC,OAAO,qBACPC,SAAS,aACTC,MAAM,OACNX,MAAOzB,KACPqC,SAAU,SAACC,EAAOb,GAAR,OAAkBxB,QAAQwB,OAG5C,kEAAKI,UAAU,kBAAkBC,MAAO,CAAES,QAAS,OAAQC,MAAO,OAAQC,WAAY,uCAClF,yFACA,2EACQ,mEAAMX,MAAO,CAAES,QAAS,MAAOG,aAAc,MAAOC,gBAAiB,SAArE,WADR,yBAGA,qEAAQC,QAAS,kBAAMnC,YAAvB,WACCF,iBACGA,gBAAgBO,KAAI,SAACC,EAAS8B,GAAV,OAChB,kEAAKhB,UAAU,iBAAiBiB,IAAKD,GACjC,iFAAcA,EAAQ,GACtB,iGAA8B9B,EAAQV,eACtC,sGAAmCU,EAAQT,oBAC3C,oFAAiBkB,UAAUT,EAAQZ,aACnC,8EAAWqB,UAAUT,EAAQb,eAS9CJ,2B,oEC3Ef,0DAMAiD,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,OAEJC,SAASC,eAAe,U","file":"static/js/main.ac37786b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport util from \"util\";\nimport { ControlledEditor } from \"@monaco-editor/react\";\n\nfunction App() {\n    const [code, setCode] = useState(\n        'const b = []\\n\\nfor (let idx = 0; idx < 1000000; idx++) {\\n\\tb.push(\"BBBBBBBBBB\".toLowerCase() === \"bbbbbbbbbb\")\\n}\\n\\n/*===*/\\n\\nconst a = []\\n\\nfor (let idx = 0; idx < 1000000; idx++) {\\n\\ta.push(\"aaaaaaaaaa\".toUpperCase() === \"AAAAAAAAAA\")\\n}'\n    );\n    const [executionStatus, setExecutionStatus] = useState([{ error: null, evalResult: undefined, timeInSeconds: 0, timeInMilliseconds: 0 }]);\n\n    function runTest() {\n        if (!code || code.length === 0) return;\n\n        const snippets = code.split(\"/*===*/\");\n\n        const execStatus = snippets.map((snippet) => {\n            let error = null;\n            let result = null;\n            const t0 = performance.now();\n\n            try {\n                result = eval(snippet);\n            } catch (err) {\n                error = err;\n            }\n\n            const t1 = performance.now();\n\n            const durationMs = t1 - t0;\n\n            return { error, evalResult: result, timeInSeconds: durationMs / 1000, timeInMilliseconds: durationMs };\n        });\n\n        setExecutionStatus(execStatus);\n    }\n\n    function consolify(value: any) {\n        return util.inspect(value, { showHidden: false });\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"main-container\" style={{ display: \"flex\", flexDirection: \"row\" }}>\n                <div className=\"left-container\">\n                    <ControlledEditor\n                        width=\"50vw\"\n                        height=\"calc(100vh - 15px)\"\n                        language=\"javascript\"\n                        theme=\"dark\"\n                        value={code}\n                        onChange={(event, value) => setCode(value as string)}\n                    />\n                </div>\n                <div className=\"right-container\" style={{ padding: \"30px\", color: \"#fff\", fontFamily: 'Consolas, \"Courier New\", monospace' }}>\n                    <h1>Execution Status</h1>\n                    <p>\n                        Use <code style={{ padding: \"2px\", borderRadius: \"3px\", backgroundColor: \"#555\" }}>/*===*/</code> to separate snippets\n                    </p>\n                    <button onClick={() => runTest()}>Execute</button>\n                    {executionStatus &&\n                        executionStatus.map((snippet, index) => (\n                            <div className=\"snippet-status\" key={index}>\n                                <h3>Snippet: {index + 1}</h3>\n                                <p>Execution time (seconds): {snippet.timeInSeconds}</p>\n                                <p>Execution time (milliseconds): {snippet.timeInMilliseconds}</p>\n                                <p>Eval result: {consolify(snippet.evalResult)}</p>\n                                <p>Error: {consolify(snippet.error)}</p>\n                            </div>\n                        ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}